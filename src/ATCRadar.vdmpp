class ATCRadar
types
values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private radar: set of Object;
	public static size: nat := 20;
	public static runway: Runway := new Runway(new Position(9,10),1);
	
operations
-- TODO Define operations here
	public ATCRadar: nat ==> ATCRadar
		ATCRadar(s) == 
		(
			size := s;
			-- initializes the current radar cells
			radar := {};
			radar := radar union {new Airplane(1,3,1,new Position(5,5))};
			radar := radar union {new Airplane(2,3,1,new Position(15,5))};
--			radar := radar union {new Airplane(3,5,1,new Position(4,15))};
			radar := radar union {new Beacon(3,new Position(1,2))};
			radar := radar union {runway};
			
			print();
			
			return self;
		)
		pre s >= size;
		
	public addObject: Object ==> ()
		addObject(object) ==
		(
			radar := radar union {object}
		)
		pre object <> undefined
		post card radar = card radar~ + 1; 
		
	public getAirplane: nat ==> Airplane
		getAirplane(id) == 
		(
			for all object in set radar do
			(
				if(isofclass(Airplane,object) and object.id = id)
				then(
					return object;
				)
				
			);
			return undefined;
		)
		pre card radar > 0
		post radar = radar~; 
		
	public checkAirplaneSafety: () ==> ()
		checkAirplaneSafety() ==
		(
			for all object in set radar do
			(
				if(isofclass(Airplane,object))
				then(
					-- cria novo set sem ele
					dcl testSet: set of Object := radar \ {object};
					
					--para cada outro aviao, ve se esta perto, se estiver, manda-o mudar de rota
					for all airplane in set testSet do
					(
					
						if(isofclass(Airplane,airplane))
						then(
								if((abs(airplane.position.x - object.position.x) < 3) and (abs(airplane.position.y - object.position.y) < 3))
								then (
									-- rodar os avioes para lados opostos
									-- 1 = N ; 2 = NE ; 3 = E ; 4 = SE ; 5 = S ; 6 = SW ; 7 = W ; 8 = NW
									dcl a: Airplane := object;
									dcl b: Airplane := airplane;
									
									
									if( (a.getDirection() = 1 and b.getDirection() = 5) 
									     or ((a.getDirection() = 5 and b.getDirection() = 1))
									     or ((a.getDirection() = 8 and b.getDirection() = 6))
									     or ((a.getDirection() = 6 and b.getDirection() = 8))
									     or ((a.getDirection() = 3 and b.getDirection() = 7))
									     or ((a.getDirection() = 7 and b.getDirection() = 3))
									     or ((a.getDirection() = 2 and b.getDirection() = 6))
									     or ((a.getDirection() = 6 and b.getDirection() = 2))
									     or ((a.getDirection() = 6 and b.getDirection() = 1))
									     or ((a.getDirection() = 1 and b.getDirection() = 6)) )
									then (IO`print("a rodar");a.rotate("CW"))
								
									
								)							


						)
								
					)
					
					
				)
			)
			
		)
		pre card radar > 0
		post radar = radar~;
		
		public move: () ==> ()
			move() == 
			(
				
        checkAirplaneSafety();
			
				for all object in set radar do
				(
					if(isofclass(Airplane,object))
					then
					(
						dcl a: Airplane := object;
						if(a.canMove())
						then(a.move())
						else(
						radar := radar \ {a}
						);
					)
				);
				print();
			);
			
		public print: () ==> ()
		print() ==
		(
			dcl x: nat := 0;
			dcl y: real := size;
			dcl found: bool := false;
			IO`print("<");
			while y <> -1 do
			(
				while x <> size do
				(
					for all object in set radar do
					(
						if(object.position.x = x and object.position.y = y)
						then(
							found := true;
						
							if(isofclass(Airplane,object))
							then(IO`print("<A"))
							else if(isofclass(Beacon,object))
							then(IO`print("<B"))
							else (IO`print("<R"))
						);
					);
					
					if(found <> true)
					then(IO`print("<."));
					
					found := false;
					
					x := x+1;
				);
				x := 0;
				IO`print("\n<");
				y := y-1;
			);
			IO`print(getAirplane(1));
			IO`print("\n");
--			IO`print(getAirplane(2));
			IO`print("\n");
			IO`print(runway);
		)

functions

traces
-- TODO Define Combinatorial Test Traces here
end ATCRadar