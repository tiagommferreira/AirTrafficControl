class Airplane is subclass of Object
types
-- TODO Define types here

										 
	public Objective = <Land> | <Exit> | <Beacon>
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private direction: nat;  -- 1 = N ; 2 = NE ; 3 = E ; 4 = SE ; 5 = S ; 6 = SW ; 7 = W ; 8 = NW
	private speed: nat;
	public objective: Objective := <Land>;
	private nextDirection: nat;
	private beaconId: nat;
	
operations
-- TODO Define operations here

	-- Constructor
	public Airplane: nat * nat * nat * Position ==> Airplane
		Airplane(id1,direction1,speed1,position1) ==
			(
					id := id1;
					direction := direction1;
					setObjective(<Beacon>,3);
					speed := speed1;
					position := position1;
					nextDirection := ((ATCRadar`runway.entryDir+4) mod 8); -- gives the opposite location of the entrance
					return self;
			)
			pre direction1 > 0 and direction1 < 9 and position1.x > 0 and position1.x < ATCRadar`size and position1.y > 0 and position1.y < ATCRadar`size
			post id = id1 and direction = direction1 and speed = speed1; 
			
	-- Getters
	public getId: () ==> nat
		getId() ==
			(
				return id;
			)
			post id = id~;	
			
	public getDirection: () ==> nat
		getDirection() ==
			(
				return direction;
			)
			post direction = direction~;
			
	public getSpeed: () ==> nat
		getSpeed() ==
			(
				return speed;
			)
			post speed = speed~;
	
	-- Setters
	public setObjective: Objective * nat ==> ()
		setObjective(o,i) ==
		(
			objective := o;
			beaconId := i;
		)
		post objective = o;
	
	public setDirection: nat ==> ()
		setDirection(dir) ==
			(
				direction := dir;
			)
			post direction = dir;
			
	public setSpeed: nat ==> ()
		setSpeed(s) ==
			(
				speed := s;
			)
			post speed = s;
			
	
	-- Utility functions
	public rotate: String ==> ()
		rotate(orientation) ==
			(
				if(orientation = "CW")
				then(
					direction := direction + 1 ;
					if(direction = 9) then (direction := 1);
				)
				else (
					direction := direction -1 ;
					if(direction = 0) then (direction := 8);
				)
			)
			pre orientation = "CW" or orientation = "CCW"
			post direction > 0 and direction < 9;
			
	public move: () ==> ()
		move() ==
		(
			-- 1 = N ; 2 = NE ; 3 = E ; 4 = SE ; 5 = S ; 6 = SW ; 7 = W ; 8 = NW
	
			if(direction = 1) -- N
			then(setPosition(position.x,position.y+speed))
			
			else if(direction = 2) -- NE
			then(setPosition(position.x+speed,position.y+speed))
			
			else if(direction = 3) -- E
			then(setPosition(position.x+speed,position.y))
			
			else if(direction = 4) -- SE
			then(setPosition(position.x+speed,position.y-speed))	
			
			else if(direction = 5) -- S
			then(setPosition(position.x,position.y-speed))
			
			else if(direction = 6) -- SW
			then(setPosition(position.x-speed,position.y-speed))
			
			else if(direction = 7) -- W
			then(setPosition(position.x-speed,position.y))
			
			else if(direction = 8) -- NW
			then(setPosition(position.x-speed,position.y+speed));
			 
		 	if(objective = <Land>)
			then(lineUpWithRunway())
			else if(objective = <Beacon>)
			then(goToBeacon())
			else(lineUpExit());
			 
		);
		
		public goToBeacon: () ==> ()
		goToBeacon() ==
		(
			dcl b: Beacon := ATCRadar`getBeacon(beaconId);
			dcl deltaX: real := position.x - b.position.x;
			dcl deltaY: real := position.y - b.position.y;
			
			IO`print(direction);
			IO`print("\n");
			IO`print(deltaX);
			IO`print("\n");
			IO`print(deltaY);
			IO`print("\n");
			
			
			if(deltaX = -1 or deltaX = 1)
			then(
				if(deltaY > 0)
				then(
					if(direction <> 5)
					then(
						rotate("CW");
					)
				)
				else if(deltaY < 0)
				then(
					if(direction <> 1)
					then(
						rotate("CW");
					)
				)
				else(
				)
			
			)

			else if(deltaX > 0)
			then(
				if(direction <> 7)
				then(
					rotate("CW");
				)
			)
			else if(deltaX < 0)
			then(
				if(direction <> 3)
				then(
					rotate("CW");
				)
			)
		
		);
		
		public lineUpWithRunway: () ==> ()
		lineUpWithRunway() ==
		(
			dcl r: Runway := ATCRadar`runway;
			
			if(r.entryDir = 5)
			then(
				--direcao da saida
				if(direction <> nextDirection)
				-- rodar para parede oposta
				then (
					if(r.position.x < position.x) 
					then ( rotate("CCW"))
					else if(r.position.x > position.x) then
					( rotate("CW"))
					else if(direction = 6) then(rotate("CCW"))else(rotate("CW"))
					
				) 
				-- ja esta na direcao certa
				else 
				(
					-- se ja esta no limite para ter de virar
					if((ATCRadar`size - position.y) = speed) 
					then (
						-- rodar para a posicao lateral
						if(r.position.x < position.x) 
						then ( 
							rotate("CCW");
							nextDirection := (nextDirection + 6) mod 8;
						 )
						else ( 
							rotate("CW");
							nextDirection := (nextDirection + 2) mod 8;
						 )
					)
					else if((position.x - r.position.x) = speed ) 
					then(
						rotate("CCW");
						nextDirection := (nextDirection + 6) mod 8;
						
					) else if((position.x - r.position.x) = -speed  ) 
						then (
							rotate("CW");
							nextDirection := (nextDirection + 2) mod 8;		
					);
				)
			)
			
			else if(r.entryDir = 1)
				then(
				--direcao da saida
				if(direction <> nextDirection)
				-- rodar para parede oposta
				then (
					if(r.position.x > position.x) 
					then ( rotate("CCW"))
					else if(r.position.x < position.x) then
					( rotate("CW"))
					else if(direction = 2) then(rotate("CCW"))else(rotate("CW"))
					
				) 
				-- ja esta na direcao certa
				else 
				(
					-- se ja esta no limite para ter de virar
					if(position.y = speed) 
					then (
						-- rodar para a posicao lateral
						if(r.position.x < position.x) 
						then (
							rotate("CW");
							nextDirection := (nextDirection + 2 ) mod 8;
						 )
						else ( 
							rotate("CCW");
							nextDirection := (nextDirection -2 ) mod 8;
						 )
					)
					else if((r.position.x - position.x) = speed ) 
					then(
						rotate("CCW");
						nextDirection := (nextDirection - 2) mod 8;
						
					) else if((r.position.x - position.x) = -speed  ) 
						then (
							rotate("CW");
							nextDirection := (nextDirection + 2) mod 8;		
					);
				)
			)
			
			else if(r.entryDir = 3)
			then(
				--direcao da saida
				if(direction <> nextDirection)
				-- rodar para parede oposta
				then (
					if(r.position.y > position.y) 
					then ( rotate("CW") )
					else if(r.position.y > position.y) then
					( rotate("CCW"))
					else if(direction = 2) then(rotate("CW"))else(rotate("CCW"))
					
				) 
				-- ja esta na direcao certa
				else 
				(
					-- se ja esta no limite para ter de virar
					if(position.x = speed) 
					then (
						-- rodar para a posicao lateral
						if(r.position.y > position.y) 
						then ( 
							rotate("CW");
							nextDirection := (nextDirection + 2) mod 8;
						 )
						else ( 
							rotate("CCW");
							nextDirection := (nextDirection - 2) mod 8;
						 )
					)
					else if((position.y - r.position.y) = speed ) 
					then(
						rotate("CCW");
						nextDirection := (nextDirection - 2) mod 8;
						
					) else if((position.y - r.position.y) = -speed  ) 
						then (
							rotate("CW");
							nextDirection := (nextDirection + 2) mod 8;		
					);
				)
			)
			
			else if(r.entryDir = 7)
			then(
				--direcao da saida
				if(direction <> nextDirection)
				-- rodar para parede oposta
				then (
					if(r.position.y > position.y) 
					then ( rotate("CCW") )
					else if(r.position.y > position.y) then
					( rotate("CW"))
					else if(direction = 8) then(rotate("CCW"))else(rotate("CW"))
					
				) 
				-- ja esta na direcao certa
				else 
				(
					-- se ja esta no limite para ter de virar
					if((ATCRadar`size - position.x) = speed) 
					then (
						-- rodar para a posicao lateral
						if(r.position.y > position.y) 
						then ( 
							rotate("CCW");
							nextDirection := (nextDirection - 2) mod 8;
						 )
						else ( 
							rotate("CW");
							nextDirection := (nextDirection + 2) mod 8;
						 )
					)
					else if((position.y - r.position.y) = speed ) 
					then(
						rotate("CW");
						nextDirection := (nextDirection + 2) mod 8;
						
					) else if((position.y - r.position.y) = -speed  ) 
						then (
							rotate("CCW");
							nextDirection := (nextDirection - 2) mod 8;		
					);
				)
			)
			
			
		)
		post position = position~;
		
		public lineUpExit: () ==> ()
		lineUpExit() ==
		(
			if(direction <> 1 and direction <> 3 and direction <> 5 and direction <> 7)
			then(rotate("CW"))
		)
		post position = position~;
		
		public canMove: () ==> bool
		canMove() ==
		(
			
			if(direction = 1) -- N
			then(if(position.y+speed <= ATCRadar`size) then(return true;))
			
			else if(direction = 2) -- NE
			then(if(position.x+speed <= ATCRadar`size and position.y+speed <= ATCRadar`size) then(return true;))
			
			else if(direction = 3) -- E
			then(if(position.x+speed <= ATCRadar`size) then(return true))
			
			else if(direction = 4) -- SE
			then(if(position.x+speed <= ATCRadar`size and position.y-speed >= 0)then(return true))	
			
			else if(direction = 5) -- S
			then(if(position.y-speed >= 0) then(return true;))
			
			else if(direction = 6) -- SW
			then(if(position.x-speed >= 0 and position.y-speed >= 0) then(return true;))
			
			else if(direction = 7) -- W
			then(if(position.x-speed >= 0) then(return true;) )
			
			else if(direction = 8) -- NW
			then(if(position.x-speed >= 0 and position.y+speed <= ATCRadar`size) then(return true;));
			
			return false;
		)
		post position = position~;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Airplane