class Airplane is subclass of Object
types
-- TODO Define types here

										 
	public Objective = <Land> | <Exit>
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private direction: nat;  -- 1 = N ; 2 = NE ; 3 = E ; 4 = SE ; 5 = S ; 6 = SW ; 7 = W ; 8 = NW
	private speed: nat;
	private objective: Objective := <Land>;
	
operations
-- TODO Define operations here

	-- Constructor
	public Airplane: nat * nat * nat * Position ==> Airplane
		Airplane(id1,direction1,speed1,position1) ==
			(
					id := id1;
					direction := direction1;
					speed := speed1;
					position := position1;
					
					return self;
			)
			pre direction1 > 0 and direction1 < 9 and position1.x > 0 and position1.x < ATCRadar`size and position1.y > 0 and position1.y < ATCRadar`size
			post id = id1 and direction = direction1 and speed = speed1 and objective = <Land>; 
			
	-- Getters
	public getId: () ==> nat
		getId() ==
			(
				return id;
			)
			post id = id~;	
			
	public getDirection: () ==> nat
		getDirection() ==
			(
				return direction;
			)
			post direction = direction~;
			
	public getSpeed: () ==> nat
		getSpeed() ==
			(
				return speed;
			)
			post speed = speed~;
	
	-- Setters
	public setDirection: nat ==> ()
		setDirection(dir) ==
			(
				direction := dir;
			)
			post direction = dir;
			
	public setSpeed: nat ==> ()
		setSpeed(s) ==
			(
				speed := s;
			)
			post speed = s;
			
	
	-- Utility functions
	public rotate: String ==> ()
		rotate(orientation) ==
			(
				if(orientation = "CW")
				then(
					direction := (direction + 1) mod 9 ;
					if(direction = 9)
					then(direction := 1)
				)
				else (
					direction := (direction - 1) mod 9 ;
					if(direction = 0)
					then(direction := 8)
				)
				
			)
			pre orientation = "CW" or orientation = "CCW"
			post direction > 0 and direction < 9;
			
	public move: () ==> ()
		move() ==
		(
			-- 1 = N ; 2 = NE ; 3 = E ; 4 = SE ; 5 = S ; 6 = SW ; 7 = W ; 8 = NW
			
			if(objective = <Land>)
			then(lineUpWithRunway())
			else(lineUpExit());
		
			if(direction = 1) -- N
			then(setPosition(position.x,position.y+speed))
			
			else if(direction = 2) -- NE
			then(setPosition(position.x+speed,position.y+speed))
			
			else if(direction = 3) -- E
			then(setPosition(position.x+speed,position.y))
			
			else if(direction = 4) -- SE
			then(setPosition(position.x+speed,position.y-speed))	
			
			else if(direction = 5) -- S
			then(setPosition(position.x,position.y-speed))
			
			else if(direction = 6) -- SW
			then(setPosition(position.x-speed,position.y-speed))
			
			else if(direction = 7) -- W
			then(setPosition(position.x-speed,position.y))
			
			else if(direction = 8) -- NW
			then(setPosition(position.x-speed,position.y+speed))
			 
		);
		
		public lineUpWithRunway: () ==> ()
		lineUpWithRunway() ==
		(
			dcl r: Runway := ATCRadar`runway;
			
			return;
			
		)
		post position = position~;
		
		public lineUpExit: () ==> ()
		lineUpExit() ==
		(
			if(direction <> 1 and direction <> 3 and direction <> 5 and direction <> 7)
			then(rotate("CW"))
		)
		post position = position~;
		
		public canMove: () ==> bool
		canMove() ==
		(
			
			if(direction = 1) -- N
			then(if(position.y+speed < ATCRadar`size) then(return true;))
			
			else if(direction = 2) -- NE
			then(if(position.x+speed < ATCRadar`size and position.y+speed < ATCRadar`size) then(return true;))
			
			else if(direction = 3) -- E
			then(if(position.x+speed < ATCRadar`size) then(return true))
			
			else if(direction = 4) -- SE
			then(if(position.x+speed < ATCRadar`size and position.y-speed >= 0))	
			
			else if(direction = 5) -- S
			then(if(position.y-speed >= 0) then(return true;))
			
			else if(direction = 6) -- SW
			then(if(position.x-speed >= 0 and position.y-speed >= 0) then(return true;))
			
			else if(direction = 7) -- W
			then(if(position.x-speed >= 0) then(return true;) )
			
			else if(direction = 8) -- NW
			then(if(position.x-speed >= 0 and position.y+speed < ATCRadar`size) then(return true;));
			
			return false;
		)
		post position = position~;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Airplane