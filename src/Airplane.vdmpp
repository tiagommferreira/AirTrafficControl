class Airplane is subclass of Object
types
-- TODO Define types here

										 
	public Objective = <Land> | <Exit>
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
	private direction: nat;  -- 1 = N ; 2 = NE ; 3 = E ; 4 = SE ; 5 = S ; 6 = SW ; 7 = W ; 8 = NW
	private speed: nat;
	private objective: Objective := <Land>;
	
operations
-- TODO Define operations here

	-- Constructor
	public Airplane: nat * nat * nat * Position ==> Airplane
		Airplane(id1,direction1,speed1,position1) ==
			(
					id := id1;
					direction := direction1;
					speed := speed1;
					position := position1;
					type := "airplane";
					
					return self;
			)
			pre direction1 > 0 and direction1 < 9
			post id = id1 and direction = direction1 and speed = speed1 and objective = <Land>; 
			
	-- Getters
	public getId: () ==> nat
		getId() ==
			(
				return id;
			)
			post id = id~;
			
	public getType: () ==> String
		getType() ==
			(
				return type;
			)
			post type = type~;		
			
	public getDirection: () ==> nat
		getDirection() ==
			(
				return direction;
			)
			post direction = direction~;
			
	public getSpeed: () ==> nat
		getSpeed() ==
			(
				return speed;
			)
			post speed = speed~;
	
	-- Setters
	public setDirection: nat ==> ()
		setDirection(dir) ==
			(
				direction := dir;
			)
			post direction = dir;
			
	public setSpeed: nat ==> ()
		setSpeed(s) ==
			(
				speed := s;
			)
			post speed = s;
			
	
	-- Utility functions
	public rotate: String ==> ()
		rotate(orientation) ==
			(
				direction := (direction + 1) mod 9 ;
			)
			pre orientation = "CW" or orientation = "CCW"
			post direction > 0 and direction < 9
			
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Airplane